// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package category

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :execresult
INSERT INTO categories (name, parent_id) VALUES (?, ?)
`

type CreateCategoryParams struct {
	Name     string
	ParentID sql.NullInt32
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCategory, arg.Name, arg.ParentID)
}

const deleteCategory = `-- name: DeleteCategory :execresult
DELETE FROM categories WHERE id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id uint32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCategory, id)
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, description, parent_id, created_at FROM categories WHERE id = ? LIMIT 1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id uint32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ParentID,
		&i.CreatedAt,
	)
	return i, err
}

const getSubCategoriesByID = `-- name: GetSubCategoriesByID :many
SELECT id, name, description, parent_id, created_at FROM categories WHERE parent_id = ?
`

func (q *Queries) GetSubCategoriesByID(ctx context.Context, parentID sql.NullInt32) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getSubCategoriesByID, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ParentID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, description, parent_id, created_at FROM categories
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ParentID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :execresult
UPDATE categories SET name = ?, parent_id = ? WHERE id = ?
`

type UpdateCategoryParams struct {
	Name     string
	ParentID sql.NullInt32
	ID       uint32
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCategory, arg.Name, arg.ParentID, arg.ID)
}
